@*
    For more information on enabling MVC for empty projects, visit https://go.microsoft.com/fwlink/?LinkID=397860
*@
@{
}
<div class="container-fluid" style="height: 100vh;">
    <div class=" block justify-between items-center p-4  mt-4 mb-6 bg-white rounded-2xl shadow-xl shadow-gray-200 lg:p-5 sm:flex">
        <nav aria-label="breadcrumb">
            <ol class="breadcrumb">
                <i class="ph-bold ph-house" style="font-size: 20px; margin: auto 5px;"></i>
                <li class="breadcrumb-item"> <a>Trang chủ</a></li>
                <li class="breadcrumb-item active" aria-current="page"> Cá nhân</li>
            </ol>
        </nav>
        <h1 class="typeHead">THAY ĐỔI MẬT KHẨU</h1>
    </div>
    <div class="changPassForm">
        <div class="getOTP">

            <h4 class="td">NHẬP MÃ OTP</h4>
            <div class="otp-container">
                <input class="otp-input" type="text" maxlength="1" oninput="handleInput(this, 2)">
                <input class="otp-input" type="text" maxlength="1" oninput="handleInput(this, 3)">
                <input class="otp-input" type="text" maxlength="1" oninput="handleInput(this, 4)">
                <input class="otp-input" type="text" maxlength="1" oninput="handleInput(this, 5)">
                <input class="otp-input" type="text" maxlength="1" oninput="handleInput(this, 6)">
                <input class="otp-input" type="text" maxlength="1" oninput="handleInput(this, 7)">
            </div>
            <script>
                function handleInput(input, nextInputIndex) {
                    const maxLength = parseInt(input.getAttribute('maxlength'), 10);
                    const inputValue = input.value;

                    if (inputValue.length === maxLength) {
                        const nextInput = document.querySelector(`.otp-input:nth-child(${nextInputIndex})`);

                        if (nextInput) {
                            nextInput.focus();
                        }
                    } else if (inputValue.length === 0) {
                        const previousInputIndex = nextInputIndex - 2; // 1-based index to 0-based index
                        const previousInput = document.querySelector(`.otp-input:nth-child(${previousInputIndex})`);

                        if (previousInput) {
                            previousInput.focus();
                        }
                    }
                }
            </script>

            <div class="row justify-content-around">
                <button class="btn-addRole" type="submit" id="myButton" onclick="handleClick(event)">
                    Lấy mã OTP
                </button>
            </div>
        </div>
        <hr />
        <h4 class="td">THAY ĐỔI MẬT KHẨU</h4>
        <form class="row g-3">
            <div class="col-md-12">
                <label for="inputCCCD" class="form-label">Nhật mật khẩu cũ</label>
                <input type="password" class="form-input">
            </div>
            <div class="col-md-12">
                <label for="inputPhone" class="form-label">Nhập mật mới</label>
                <input type="password" class="form-input" id="inputPhone">
            </div>
            <div class="col-md-12">
                <label for="inputEmail4" class="form-label">Xác nhận mật khẩu</label>
                <input type="password" class="form-input" id="inputEmail4">
            </div>
            <div class="col-md-6">
                <button class="btn-addRole" type="submit" style="width: 100%;">
                    THAY ĐỔI MẬT KHẨU
                </button>
            </div>
        </form>
    </div>
</div>
<script>
    let isButtonDisabled = false;

    function handleClick(event) {
        const button = document.getElementById('myButton');
        if (!isButtonDisabled) {
            const countdownSpan = document.createElement('span');
            countdownSpan.className = 'countdown';
            button.appendChild(countdownSpan);

            disableButtonForSeconds(180, countdownSpan);
            button.style.cursor = 'not-allowed';
        }
        event.preventDefault();
    }

    function disableButtonForSeconds(seconds, countdownSpan) {
        isButtonDisabled = true;
        document.getElementById('myButton').classList.add('disabled');

        let secondsRemaining = seconds;

        const countdownInterval = setInterval(() => {
            const minutes = Math.floor(secondsRemaining / 60);
            const remainingSeconds = secondsRemaining % 60;

            if (secondsRemaining <= 0) {
                clearInterval(countdownInterval);
                isButtonDisabled = false;
                document.getElementById('myButton').classList.remove('disabled');
                document.getElementById('myButton').style.cursor = 'pointer';
                countdownSpan.remove();
            } else {
                countdownSpan.textContent = ` (${minutes}p ${remainingSeconds}s)`;
                secondsRemaining--;
            }
        }, 1000);
    }
</script>