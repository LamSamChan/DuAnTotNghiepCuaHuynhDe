@using Newtonsoft.Json;
@using QuanLyHopDongVaKySo_API.Models;

@model QuanLyHopDongVaKySo_API.Models.TemplateContract
@{

    SignatureZone customerZone = new SignatureZone();
    SignatureZone directorZone = new SignatureZone();
    float xCustomer, yCustomer, xDirector, yDirector;
    if (Model.jsonCustomerZone != null && Model.jsonDirectorZone != null)
    {
        customerZone = JsonConvert.DeserializeObject<SignatureZone>(Model.jsonCustomerZone);
        directorZone = JsonConvert.DeserializeObject<SignatureZone>(Model.jsonDirectorZone);
        xCustomer = customerZone.X;
        yCustomer = customerZone.Y;
        xDirector = directorZone.X;
        yDirector = directorZone.Y;
    }
    else
    {
        xCustomer = 0;
        yCustomer = 0;
        xDirector = 0;
        yDirector = 0;
    }

    string directoryPath = "wwwroot\\TContractImage\\" + Model.TContactID;
    List<string> imagePath = new List<string>();
    int tContractId = Model.TContactID;
    string tContractName = Model.TContractName;
    string? tContractFile = Model.TContractFile;
    imagePath = Directory.GetFiles(directoryPath).ToList();

}
<link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.1.1/css/all.min.css">
<link href="~/php/style.css" rel="stylesheet" />

<link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/sweetalert2@11/dist/sweetalert2.min.css">
<script src="https://unpkg.com/konva@9/konva.min.js"></script>

<style>
     .loading {
         position: absolute;
         z-index: 1;
         width: 100%;
         height: 100%;
         display: none;
         align-items: center;
         justify-content: center;
         background: rgba(0, 0, 0, 0.479);
     }

         .loading img {
             width: 7rem;
         }
</style>
<div class="loading" id="loading">
    <img src="https://icon-library.com/images/spinner-icon-gif/spinner-icon-gif-10.jpg" alt="loading">
</div>
<div class="container-fluid">
    <div class=" block justify-between items-center p-4  mt-4 mb-6 bg-white rounded-2xl shadow-xl shadow-gray-200 lg:p-5 sm:flex rounded mb-4">
        <nav aria-label="breadcrumb">
            <ol class="breadcrumb">
                <i class="ph-bold ph-house" style="font-size: 20px; margin: auto 5px;"></i>
                <li class="breadcrumb-item"> <a>Trang chủ</a></li>
                <li class="breadcrumb-item active" aria-current="page"> Danh sách mẫu hợp đồng</li>
            </ol>
        </nav>
        <h1 class="typeHead">CẤU HÌNH HỢP ĐỒNG MẪU</h1>
        <h6 class="typeHead">Mã hợp đồng:_ @Model.TContactID</h6>
    </div>
    <div style="display: flex; justify-content: space-evenly; gap: 20px;">
        <button id="addDirectorSignatureButton" class="button-22 d-none">
            Thêm vùng ký Giám đốc (ĐỎ)
        </button>
        <button id="getCoordinatesButton" class="number">Lưu</button>
        <button id="addCustomerSignatureButton" class="button-22 d-none">
            Thêm vùng ký Khách hàng (XANH)
        </button>
    </div>
    <br />
    <div id="pdfContainer"></div>
    <br />
    <div style="display: flex; justify-content: space-evenly; gap: 10px;">
        <button id="prevPageButton" class="button-22">Trang Trước</button>
        <button id="nextPageButton" class="button-22">Trang Tiếp</button>

    </div>
</div>

<script>
      const iconLoading = document.getElementById("loading");

                const showLoading = () => {
                    iconLoading.style.display = "flex";
                };
                const hideLoading = () => {
                    iconLoading.style.display = "none";
                };

    var imageFiles = @Html.Raw(Json.Serialize(imagePath));
    const pdfContainer = document.getElementById("pdfContainer");
    const stage = new Konva.Stage({
        container: "pdfContainer",
        width: pdfContainer.clientWidth,
        height: pdfContainer.clientHeight,
    });
    const signatureLayer = new Konva.Layer(); // Lớp cho các vùng chữ ký
    const signatureAreas = [];
    let directorCoordinates = "";
    let customerCoordinates = "";
    let draggable = false;
    var imagePaths = imageFiles.map(function (path) {
        return path.replace(/wwwroot/, "");
    });
    console.log(imagePaths);
    document
        .getElementById("addDirectorSignatureButton")
        .addEventListener("click", function () {
            draggable = true;
            createSignatureArea("Director");
        });

    document
        .getElementById("addCustomerSignatureButton")
        .addEventListener("click", function () {
            draggable = true;
            createSignatureArea("Customer");
        });

    document
        .getElementById("getCoordinatesButton")
        .addEventListener("click", function () {
            getSignatureAreasCoordinates();
        });

    document
        .getElementById("prevPageButton")
        .addEventListener("click", function () {
            showPage(currentPageIndex - 1);
        });

    document
        .getElementById("nextPageButton")
        .addEventListener("click", function () {
            showPage(currentPageIndex + 1);
        });

    let currentPageIndex = 0;

    function showPage(index) {
        if (index < 0 || index >= imagePaths.length) {
            return;
        }

        currentPageIndex = index;

        // Tìm lớp hiện tại
        let pdfLayer = stage.findOne(".pdf-layer");

        // Nếu lớp không tồn tại, tạo một lớp mới
        if (!pdfLayer) {
            pdfLayer = new Konva.Layer({
                name: "pdf-layer"
            });
            stage.add(pdfLayer);
        }

        const imgElement = new Image();

        imgElement.onload = function () {
            const img = new Konva.Image({
                x: 0,
                y: 0,
                width: pdfContainer.clientWidth,
                height: pdfContainer.clientHeight,
                name: "pdf-image",
                image: imgElement,
            });

            // Xóa tất cả các vị trí trong lớp hiện tại
            pdfLayer.destroyChildren();
            pdfLayer.add(img);
            pdfLayer.batchDraw();

            if (index === imagePaths.length - 1) {
                draggable = true;
            } else {
                draggable = false;
            }

            stage.add(signatureLayer);
        };

        imgElement.src = imagePaths[index];

        if (index === imagePaths.length - 1) {
            // Hiển thị vùng chữ ký chỉ ở trang cuối cùng
            signatureLayer.show();
        } else {
            signatureLayer.hide();
        }
    }

    function createSignatureArea(role) {
        // Kiểm tra xem vùng chữ ký đã được thêm chưa
        const existingSignature = signatureAreas.find(
            (area) => area.role === role
        );

        if (existingSignature) {
            alert(`Bạn đã thêm vị trí chữ ký của ${role} rồi.`);
            return;
        }

        const strokeColor = role === "Director" ? "red" : "blue";
        const labelText = role === "Director" ? "Giám đốc" : "Khách hàng";
        if (@Html.Raw(yCustomer) == 0 && @Html.Raw(xCustomer) == 0 && @Html.Raw(yDirector) == 0 && @Html.Raw(xDirector) == 0) {
            // Create a group to hold the background rectangle and text label
            const signatureGroup = new Konva.Group({
                x: 50,
                y: 50,
                width: 150,
                height: 70,
                draggable: draggable,
            });

            const backgroundRect = new Konva.Rect({
                width: 150,
                height: 70,
                fill: "white", // Set the background color
                stroke: strokeColor,
                strokeWidth: 2,
                dash: [5, 5],
                draggable: draggable,
            });

            const signatureText = new Konva.Text({
                width: 150,
                height: 70,
                text: labelText,
                fill: strokeColor,
                fontSize: 24,
                align: 'center',
                verticalAlign: 'middle',
            });

            // Add the background rectangle and text to the signatureGroup
            signatureGroup.add(backgroundRect, signatureText);

            // Add the group to the signatureLayer
            signatureLayer.add(signatureGroup);
            signatureLayer.batchDraw();

            signatureAreas.push({
                role,
                element: signatureGroup,
            });
        }else{
            if (role == "Director"){
                // Create a group to hold the background rectangle and text label
                xDirector = @Html.Raw(xDirector);
                yDirector = @Html.Raw(yDirector);
                const signatureGroup = new Konva.Group({
                    x: xDirector,
                    y: yDirector,
                    width: 150,
                    height: 70,
                    draggable: draggable,
                });

                const backgroundRect = new Konva.Rect({
                    width: 150,
                    height: 70,
                    fill: "white", // Set the background color
                    stroke: strokeColor,
                    strokeWidth: 2,
                    dash: [5, 5],
                    draggable: draggable,
                });

                const signatureText = new Konva.Text({
                    width: 150,
                    height: 70,
                    text: labelText,
                    fill: strokeColor,
                    fontSize: 24,
                    align: 'center',
                    verticalAlign: 'middle',
                });

                // Add the background rectangle and text to the signatureGroup
                signatureGroup.add(backgroundRect, signatureText);

                // Add the group to the signatureLayer
                signatureLayer.add(signatureGroup);
                signatureLayer.batchDraw();

                signatureAreas.push({
                    role,
                    element: signatureGroup,
                });
            }else{
                // Create a group to hold the background rectangle and text label
                xCustomer = @Html.Raw(xCustomer);
                yCustomer = @Html.Raw(yCustomer);
                const signatureGroup = new Konva.Group({
                    x: xCustomer,
                    y: yCustomer,
                    width: 150,
                    height: 70,
                    draggable: draggable,
                });

                const backgroundRect = new Konva.Rect({
                    width: 150,
                    height: 70,
                    fill: "white", // Set the background color
                    stroke: strokeColor,
                    strokeWidth: 2,
                    dash: [5, 5],
                    draggable: draggable,
                });

                const signatureText = new Konva.Text({
                    width: 150,
                    height: 70,
                    text: labelText,
                    fill: strokeColor,
                    fontSize: 24,
                    align: 'center',
                    verticalAlign: 'middle',
                });

                // Add the background rectangle and text to the signatureGroup
                signatureGroup.add(backgroundRect, signatureText);

                // Add the group to the signatureLayer
                signatureLayer.add(signatureGroup);
                signatureLayer.batchDraw();

                signatureAreas.push({
                    role,
                    element: signatureGroup,
                });
            }
        }
        
    }

    function getSignatureAreasCoordinates() {
        signatureAreas.forEach((area) => {
            const position = area.element.getAbsolutePosition();
            const role = area.role.toLowerCase();

            if (role === "director") {
                directorCoordinates = {
                    x: position.x,
                    y: position.y
                };
            } else if (role === "customer") {
                customerCoordinates = {
                    x: position.x,
                    y: position.y
                };
            }
        });

        var tContract = {
            TContactID: @Html.Raw(tContractId),
            TContractName: '@Html.Raw(tContractName)',
            TContractFile: '@Html.Raw(tContractFile)',
            jsonDirectorZone: JSON.stringify(directorCoordinates),
            jsonCustomerZone: JSON.stringify(customerCoordinates),
        };

        $.ajax({
            url: '@Url.Action("UpdateCFormPage")',
            type: 'PUT',
            contentType: 'application/json',
            data: JSON.stringify(tContract),
            beforeSend: function () {
                // Show loading icon before sending the request
                showLoading();
            },
            success: function (result) {
                // Hide loading icon after the request is successful
                hideLoading();

                if (!result.success) {
                    // Hiển thị SweetAlert thông báo lưu thành công
                    showSaveSuccessAlert();
                } else {
                    // Hiển thị SweetAlert thông báo lưu thất bại
                    showSaveErrorAlert();
                }
            },
            error: function () {
                // Hide loading icon in case of an error
                hideLoading();

                // Hiển thị SweetAlert thông báo lưu thất bại
                showSaveErrorAlert();
            }
        });

    }
    function showSaveSuccessAlert() {
        // Hiển thị SweetAlert với thông báo lưu thành công
        Swal.fire({
            icon: 'success',
            title: 'Thành công!',
            text: 'Dữ liệu đã được lưu thành công.',
            confirmButtonText: 'OK'
        }).then((result) => {
            // Chuyển hướng tới trang mong muốn sau khi người dùng nhấp OK
            var redirectToUrl = '@Url.Action("ListContractFormPage")';
            window.location.href = redirectToUrl;
        });
    }

    function showSaveErrorAlert() {
        // Hiển thị SweetAlert với thông báo lưu thất bại
        Swal.fire({
            icon: 'error',
            title: 'Lỗi!',
            text: 'Đã xảy ra lỗi khi lưu dữ liệu.',
            confirmButtonText: 'OK'
        });
    }

    document.addEventListener("DOMContentLoaded", function () {
        showPage(currentPageIndex);
        draggable = true;
        createSignatureArea("Director");
        createSignatureArea("Customer");
    });
</script>
<script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>



