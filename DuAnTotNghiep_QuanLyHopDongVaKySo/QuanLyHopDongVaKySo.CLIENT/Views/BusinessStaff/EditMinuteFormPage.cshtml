
@model QuanLyHopDongVaKySo_API.Models.TemplateMinute
@{
    string directoryPath = "wwwroot\\TMinuteImage\\" + Model.TMinuteID;
    List<string> imagePath = new List<string>();
    int tMinuteId = Model.TMinuteID;
    string tMinuteName = Model.TMinuteName;
    string? tMinuteFile = Model.TMinuteFile;
    imagePath = Directory.GetFiles(directoryPath).ToList();
}
<link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.1.1/css/all.min.css">
<link href="~/php/style.css" rel="stylesheet" />

<script src="https://unpkg.com/konva@9/konva.min.js"></script>

<div class="container-fluid">
    <div class=" block justify-between items-center p-4  mt-4 mb-6 bg-white rounded-2xl shadow-xl shadow-gray-200 lg:p-5 sm:flex rounded mb-4">
        <nav aria-label="breadcrumb">
            <ol class="breadcrumb">
                <i class="ph-bold ph-house" style="font-size: 20px; margin: auto 5px;"></i>
                <li class="breadcrumb-item"> <a>Trang chủ</a></li>
                <li class="breadcrumb-item active" aria-current="page"> Danh sách mẫu biên bản</li>
            </ol>
        </nav>
        <h1 class="typeHead">CẤU HÌNH BIÊN BẢN MẪU</h1>
        <h6 class="typeHead">Mã biên bản:_ @Model.TMinuteID</h6>
    </div>
    
    <div style="display: flex; justify-content: space-evenly; gap: 20px;">
        <button id="addDirectorSignatureButton"  class="button-22">
            Thêm vùng ký Nhân viên (ĐỎ)
        </button>
        <button id="getCoordinatesButton"  class="number" >Lưu</button>
        <button id="addCustomerSignatureButton" class="button-22">
            Thêm vùng ký Khách hàng (XANH)
        </button>

    </div>
    <br />
        <div id="pdfContainer"></div>
        <br />
    <div style="display: flex; justify-content: space-evenly; gap: 10px;">
    <button id="prevPageButton" class="button-22">Trang Trước</button>
    <button id="nextPageButton" class="button-22">Trang Tiếp</button>

    </div>
</div>
<script>
    var imageFiles = @Html.Raw(Json.Serialize(imagePath));
    const pdfContainer = document.getElementById("pdfContainer");
    const stage = new Konva.Stage({
        container: "pdfContainer",
        width: pdfContainer.clientWidth,
        height: pdfContainer.clientHeight,
    });
    const signatureLayer = new Konva.Layer(); // Lớp cho các vùng chữ ký
    const signatureAreas = [];
    let directorCoordinates = "";
    let customerCoordinates = "";
    let draggable = false;
    var imagePaths = imageFiles.map(function (path) {
        return path.replace(/wwwroot/, "");
    });

    document
        .getElementById("addDirectorSignatureButton")
        .addEventListener("click", function () {
            draggable = true;
            createSignatureArea("Director");
        });

    document
        .getElementById("addCustomerSignatureButton")
        .addEventListener("click", function () {
            draggable = true;
            createSignatureArea("Customer");
        });

    document
        .getElementById("getCoordinatesButton")
        .addEventListener("click", function () {
            getSignatureAreasCoordinates();
        });

    document
        .getElementById("prevPageButton")
        .addEventListener("click", function () {
            showPage(currentPageIndex - 1);
        });

    document
        .getElementById("nextPageButton")
        .addEventListener("click", function () {
            showPage(currentPageIndex + 1);
        });

    let currentPageIndex = 0;

    function showPage(index) {
        if (index < 0 || index >= imagePaths.length) {
            return;
        }

        currentPageIndex = index;

        // Tìm lớp hiện tại
        let pdfLayer = stage.findOne(".pdf-layer");

        // Nếu lớp không tồn tại, tạo một lớp mới
        if (!pdfLayer) {
            pdfLayer = new Konva.Layer({
                name: "pdf-layer"
            });
            stage.add(pdfLayer);
        }

        const imgElement = new Image();

        imgElement.onload = function () {
            const img = new Konva.Image({
                x: 0,
                y: 0,
                width: pdfContainer.clientWidth,
                height: pdfContainer.clientHeight,
                name: "pdf-image",
                image: imgElement,
            });

            // Xóa tất cả các vị trí trong lớp hiện tại
            pdfLayer.destroyChildren();
            pdfLayer.add(img);
            pdfLayer.batchDraw();

            if (index === imagePaths.length - 1) {
                draggable = true;
            } else {
                draggable = false;
            }

            stage.add(signatureLayer);
        };

        imgElement.src = imagePaths[index];

        if (index === imagePaths.length - 1) {
            // Hiển thị vùng chữ ký chỉ ở trang cuối cùng
            signatureLayer.show();
        } else {
            signatureLayer.hide();
        }
    }

    function createSignatureArea(role) {
        // Kiểm tra xem vùng chữ ký đã được thêm chưa
        const existingSignature = signatureAreas.find(
            (area) => area.role === role
        );

        if (existingSignature) {
            alert(`Bạn đã thêm vị trí chữ ký của ${role} rồi.`);
            return;
        }

        const strokeColor = role === "Director" ? "red" : "blue";
        const labelText = role === "Director" ? "Nhân viên" : "Khách hàng";

        // Create a group to hold the background rectangle and text label
        const signatureGroup = new Konva.Group({
            x: 50,
            y: 50,
            width: 150,
            height: 70,
            draggable: draggable,
        });

        const backgroundRect = new Konva.Rect({
            width: 150,
            height: 70,
            fill: "white", // Set the background color
            stroke: strokeColor,
            strokeWidth: 2,
            dash: [5, 5],
            draggable: draggable,
        });

        const signatureText = new Konva.Text({
            width: 150,
            height: 70,
            text: labelText,
            fill: strokeColor,
            fontSize: 24,
            align: 'center',
            verticalAlign: 'middle',
        });

        // Add the background rectangle and text to the signatureGroup
        signatureGroup.add(backgroundRect, signatureText);

        // Add the group to the signatureLayer
        signatureLayer.add(signatureGroup);
        signatureLayer.batchDraw();

        signatureAreas.push({
            role,
            element: signatureGroup,
        });
    }

    function getSignatureAreasCoordinates() {
        signatureAreas.forEach((area) => {
            const position = area.element.getAbsolutePosition();
            const role = area.role.toLowerCase();

            if (role === "director") {
                directorCoordinates = {
                    x: position.x,
                    y: position.y
                };
            } else if (role === "customer") {
                customerCoordinates = {
                    x: position.x,
                    y: position.y
                };
            }
        });
        var tMinute = {
            TMinuteID: @Html.Raw(tMinuteId),
            TMinuteName: '@Html.Raw(tMinuteName)',
            TMinuteFile: '@Html.Raw(tMinuteFile)',
            jsonInstallerZone: JSON.stringify(directorCoordinates),
            jsonCustomerZone: JSON.stringify(customerCoordinates),
        };

        $.ajax({
            url: '@Url.Action("UpdateMFormPage")',
            type: 'PUT',
            contentType: 'application/json',
            data: JSON.stringify(tMinute),
            success: function (result) {
                if (!result.success) {
                    // Chuyển hướng tới trang mong muốn
                    var redirectToUrl = '@Url.Action("ListMinuteFormPage")';
                    window.location.href = redirectToUrl;
                }
            },
            error: function () {
                console.error('Lỗi khi gửi yêu cầu.');

            }
        });

    }

    document.addEventListener("DOMContentLoaded", function () {
        showPage(currentPageIndex);
    });
</script>





